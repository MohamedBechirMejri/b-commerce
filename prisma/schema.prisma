// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  //  ↑↑↑ NextAuth Defaults
  reviews       Review[]
  wishlist      Product[]
  delivery_info Delivery_Info[]
  phone         Int?            @unique
  orders        Order[]
  payment_info  Payment_Info[]
  Transaction   Transaction[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Product {
  id                 String               @id @default(cuid())
  name               String
  price              Int
  stock              Int
  discount_price     Int?
  availability       Product_Availability @default(IN_STOCK)
  related_products   Product[]            @relation("related products")
  related_to_product Product[]            @relation("related products")
  reviews            Review[]
  categories         Category[]
  description        String               @db.Text
  technical_sheet    String               @db.Text
  images             String[]
  videos             String[]
  model_3d           String
  Seller             Seller?              @relation(fields: [sellerId], references: [id])
  sellerId           String?
  Manufacturer       Manufacturer?        @relation(fields: [manufacturerId], references: [id])
  manufacturerId     String?
  wished_by          User[]
  orders             Order[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  tags               Tag[]
}

model Category {
  id              String          @id @default(cuid())
  name            String
  description     String          @db.Text
  parent          Category?       @relation("sub categories", fields: [categoryId], references: [id])
  children        Category[]      @relation("sub categories")
  categoryId      String?
  products        Product[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  tag_collections TagCollection[]
}

model Tag {
  id              String         @id @default(cuid())
  name            String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  TagCollection   TagCollection? @relation(fields: [tagCollectionId], references: [id])
  tagCollectionId String?
  Product         Product?       @relation(fields: [productId], references: [id])
  productId       String?
}

model TagCollection {
  id         String    @id @default(cuid())
  name       String
  tags       Tag[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Seller {
  id           String         @id @default(cuid())
  name         String         @unique
  email        String         @unique
  phone        Int            @unique
  products     Product[]
  payment_info Payment_Info[]
  Transaction  Transaction[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Manufacturer {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   @db.Text
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  score     Int
  title     String?
  body      String?
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String         @id @default(cuid())
  products        Product[]
  total           Int
  is_prepaid      Boolean
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  status          Order_Status   @default(AWAITING_CONFIRMATION)
  promo_codes     Promo_Code[]
  courier         Courier?       @relation(fields: [courierId], references: [id])
  courierId       String?
  Delivery_Info   Delivery_Info? @relation(fields: [delivery_InfoId], references: [id])
  delivery_InfoId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Courier {
  id               String         @id @default(cuid())
  name             String
  email            String         @unique
  phone            Int            @unique
  current_location String?
  orders           Order[]
  payment_info     Payment_Info[]
  status           Courier_Status
  payment_InfoId   String
  Transaction      Transaction[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Delivery_Info {
  id          String   @id @default(cuid())
  address     String
  maps_coords String?
  phone       Int
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment_Info {
  id                String   @id @default(cuid())
  //Add payment info
  amount_to_receive Int?
  amount_to_pay     Int?
  Courier           Courier? @relation(fields: [courierId], references: [id])
  courierId         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Seller            Seller?  @relation(fields: [sellerId], references: [id])
  sellerId          String?
  User              User?    @relation(fields: [userId], references: [id])
  userId            String?
}

model Transaction {
  id              String         @id @default(cuid())
  amount_sent     Int?
  amount_received Int?
  User            User?          @relation(fields: [userId], references: [id])
  userId          String?
  Courier         Courier?       @relation(fields: [courierId], references: [id])
  courierId       String?
  Seller          Seller?        @relation(fields: [sellerId], references: [id])
  sellerId        String?
  payment_method  Payment_Method @default(CASH)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Promo_Code {
  id              String        @id @default(cuid())
  code            String        @unique
  is_used         Boolean
  is_accessed     Boolean
  discount_amount Int
  discount_type   Discount_Type @default(CURRENCY)
  Order           Order?        @relation(fields: [orderId], references: [id])
  orderId         String?
}

enum Discount_Type {
  PERCENTAGE
  CURRENCY
}

enum Payment_Method {
  CASH
  BANK
  CREDIT_CARD
}

enum Courier_Status {
  AVAILABLE
  DELIVERING
  UNAVAILABLE
}

enum Order_Status {
  AWAITING_CONFIRMATION
  CONFIRMED
  DELIVERING
  DELIVERED
  CANCELED
}

enum Product_Availability {
  IN_STOCK
  SOLD_OUT
  RESTOCKING
  ON_DEMAND
}
